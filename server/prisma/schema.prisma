// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  firstName String
  lastName  String
  password  String
  birthDay  DateTime?
  address   String?
  image     String?
  phone     String?
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Role   Role?   @relation(fields: [roleId], references: [id])
  roleId Int?    @default(2)
  carts  Cart[]
  orders Order[]
}

model Category {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  slug     String?
  isDelete Boolean @default(false)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       Float
  description String  @db.Text
  quantity    Int
  mass        Int?
  origin      String?
  image       String?
  isDelete    Boolean @default(false)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  Unit         Unit?         @relation(fields: [unitId], references: [id])
  unitId       Int?          @default(1)
  carts        Cart[]
  orderDetails OrderDetail[]
}

model Unit {
  id       Int       @id @default(autoincrement())
  name     String
  isDelete Boolean   @default(false)
  Product  Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Order {
  id          Int      @id @default(autoincrement())
  shipName    String
  shipAddress String
  shipEmail   String?
  shipPhone   String
  status      Int      @default(0)
  total       Float    @default(0)
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId Int?

  orderDetails OrderDetail[]
}

model Delivery {
  id       Int     @id @default(autoincrement())
  name     String
  isDelete Boolean @default(false)

  Order Order[]
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}
